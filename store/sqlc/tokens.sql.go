// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tokens.sql

package sqlc

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (email, token, expiration, created_at)
VALUES (?, ?, ?, ?)
RETURNING id, email, token, expiration, created_at
`

type CreateTokenParams struct {
	Email      string
	Token      string
	Expiration time.Time
	CreatedAt  time.Time
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.Email,
		arg.Token,
		arg.Expiration,
		arg.CreatedAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.Expiration,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM tokens
WHERE expiration < ?
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context, expiration time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredTokens, expiration)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE token = ?
`

func (q *Queries) DeleteToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteToken, token)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, email, token, expiration, created_at FROM tokens
WHERE token = ? LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, token string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, token)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.Expiration,
		&i.CreatedAt,
	)
	return i, err
}

const verifyToken = `-- name: VerifyToken :one
SELECT email FROM tokens
WHERE token = ? AND expiration > ?
LIMIT 1
`

type VerifyTokenParams struct {
	Token      string
	Expiration time.Time
}

func (q *Queries) VerifyToken(ctx context.Context, arg VerifyTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, verifyToken, arg.Token, arg.Expiration)
	var email string
	err := row.Scan(&email)
	return email, err
}
