// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: videos.sql

package sqlc

import (
	"context"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO videos (external_id, user_id, title, description, video_url, cover_url, price_in_cents)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, external_id, user_id, title, description, video_url, cover_url, price_in_cents, total_views, created_at
`

type CreateVideoParams struct {
	ExternalID   string
	UserID       int64
	Title        string
	Description  string
	VideoUrl     string
	CoverUrl     string
	PriceInCents int64
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, createVideo,
		arg.ExternalID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.VideoUrl,
		arg.CoverUrl,
		arg.PriceInCents,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.VideoUrl,
		&i.CoverUrl,
		&i.PriceInCents,
		&i.TotalViews,
		&i.CreatedAt,
	)
	return i, err
}

const deleteVideo = `-- name: DeleteVideo :exec
DELETE FROM videos
WHERE external_id = ?
`

func (q *Queries) DeleteVideo(ctx context.Context, externalID string) error {
	_, err := q.db.ExecContext(ctx, deleteVideo, externalID)
	return err
}

const getVideoByExternalID = `-- name: GetVideoByExternalID :one
SELECT id, external_id, user_id, title, description, video_url, cover_url, price_in_cents, total_views, created_at FROM videos
WHERE external_id = ? LIMIT 1
`

func (q *Queries) GetVideoByExternalID(ctx context.Context, externalID string) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideoByExternalID, externalID)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.VideoUrl,
		&i.CoverUrl,
		&i.PriceInCents,
		&i.TotalViews,
		&i.CreatedAt,
	)
	return i, err
}

const incrementVideoViews = `-- name: IncrementVideoViews :one
UPDATE videos
SET total_views = total_views + 1
WHERE external_id = ?
RETURNING id, external_id, user_id, title, description, video_url, cover_url, price_in_cents, total_views, created_at
`

func (q *Queries) IncrementVideoViews(ctx context.Context, externalID string) (Video, error) {
	row := q.db.QueryRowContext(ctx, incrementVideoViews, externalID)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.VideoUrl,
		&i.CoverUrl,
		&i.PriceInCents,
		&i.TotalViews,
		&i.CreatedAt,
	)
	return i, err
}

const listUserVideos = `-- name: ListUserVideos :many
SELECT id, external_id, user_id, title, description, video_url, cover_url, price_in_cents, total_views, created_at FROM videos
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListUserVideos(ctx context.Context, userID int64) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, listUserVideos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.VideoUrl,
			&i.CoverUrl,
			&i.PriceInCents,
			&i.TotalViews,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchVideos = `-- name: SearchVideos :many
SELECT id, external_id, user_id, title, description, video_url, cover_url, price_in_cents, total_views, created_at FROM videos
WHERE title LIKE ? OR description LIKE ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type SearchVideosParams struct {
	Title       string
	Description string
	Limit       int64
	Offset      int64
}

func (q *Queries) SearchVideos(ctx context.Context, arg SearchVideosParams) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, searchVideos,
		arg.Title,
		arg.Description,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.VideoUrl,
			&i.CoverUrl,
			&i.PriceInCents,
			&i.TotalViews,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
