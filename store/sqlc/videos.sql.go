// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: videos.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO videos (external_id, user_id, title, description, cover_url, price_in_cents, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, external_id, user_id, title, description, cover_url, price_in_cents, total_views, thumbnail_url, hls_url, dash_url, duration_in_seconds, size_in_bytes, input_height, input_width, ready_to_stream, created_at
`

type CreateVideoParams struct {
	ExternalID   string
	UserID       int64
	Title        string
	Description  string
	CoverUrl     string
	PriceInCents int64
	CreatedAt    time.Time
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, createVideo,
		arg.ExternalID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.CoverUrl,
		arg.PriceInCents,
		arg.CreatedAt,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CoverUrl,
		&i.PriceInCents,
		&i.TotalViews,
		&i.ThumbnailUrl,
		&i.HlsUrl,
		&i.DashUrl,
		&i.DurationInSeconds,
		&i.SizeInBytes,
		&i.InputHeight,
		&i.InputWidth,
		&i.ReadyToStream,
		&i.CreatedAt,
	)
	return i, err
}

const deleteVideo = `-- name: DeleteVideo :exec
DELETE FROM videos
WHERE external_id = ?
`

func (q *Queries) DeleteVideo(ctx context.Context, externalID string) error {
	_, err := q.db.ExecContext(ctx, deleteVideo, externalID)
	return err
}

const getVideoByExternalID = `-- name: GetVideoByExternalID :one
SELECT id, external_id, user_id, title, description, cover_url, price_in_cents, total_views, thumbnail_url, hls_url, dash_url, duration_in_seconds, size_in_bytes, input_height, input_width, ready_to_stream, created_at FROM videos
WHERE external_id = ? LIMIT 1
`

func (q *Queries) GetVideoByExternalID(ctx context.Context, externalID string) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideoByExternalID, externalID)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CoverUrl,
		&i.PriceInCents,
		&i.TotalViews,
		&i.ThumbnailUrl,
		&i.HlsUrl,
		&i.DashUrl,
		&i.DurationInSeconds,
		&i.SizeInBytes,
		&i.InputHeight,
		&i.InputWidth,
		&i.ReadyToStream,
		&i.CreatedAt,
	)
	return i, err
}

const incrementVideoViews = `-- name: IncrementVideoViews :exec
UPDATE videos
SET total_views = total_views + 1
WHERE external_id = ?
`

func (q *Queries) IncrementVideoViews(ctx context.Context, externalID string) error {
	_, err := q.db.ExecContext(ctx, incrementVideoViews, externalID)
	return err
}

const listUserVideos = `-- name: ListUserVideos :many
SELECT id, external_id, user_id, title, description, cover_url, price_in_cents, total_views, thumbnail_url, hls_url, dash_url, duration_in_seconds, size_in_bytes, input_height, input_width, ready_to_stream, created_at FROM videos
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListUserVideos(ctx context.Context, userID int64) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, listUserVideos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CoverUrl,
			&i.PriceInCents,
			&i.TotalViews,
			&i.ThumbnailUrl,
			&i.HlsUrl,
			&i.DashUrl,
			&i.DurationInSeconds,
			&i.SizeInBytes,
			&i.InputHeight,
			&i.InputWidth,
			&i.ReadyToStream,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchVideos = `-- name: SearchVideos :many
SELECT id, external_id, user_id, title, description, cover_url, price_in_cents, total_views, thumbnail_url, hls_url, dash_url, duration_in_seconds, size_in_bytes, input_height, input_width, ready_to_stream, created_at FROM videos
WHERE title LIKE ? OR description LIKE ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type SearchVideosParams struct {
	Title       string
	Description string
	Limit       int64
	Offset      int64
}

func (q *Queries) SearchVideos(ctx context.Context, arg SearchVideosParams) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, searchVideos,
		arg.Title,
		arg.Description,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CoverUrl,
			&i.PriceInCents,
			&i.TotalViews,
			&i.ThumbnailUrl,
			&i.HlsUrl,
			&i.DashUrl,
			&i.DurationInSeconds,
			&i.SizeInBytes,
			&i.InputHeight,
			&i.InputWidth,
			&i.ReadyToStream,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVideo = `-- name: UpdateVideo :one
UPDATE videos
SET 
  thumbnail_url = COALESCE(?1, thumbnail_url),
  hls_url = COALESCE(?2, hls_url),
  dash_url = COALESCE(?3, dash_url),
  duration_in_seconds = COALESCE(?4, duration_in_seconds),
  size_in_bytes = COALESCE(?5, size_in_bytes),
  input_height = COALESCE(?6, input_height),
  input_width = COALESCE(?7, input_width),
  ready_to_stream = ?8
WHERE external_id = ?9
RETURNING id, external_id, user_id, title, description, cover_url, price_in_cents, total_views, thumbnail_url, hls_url, dash_url, duration_in_seconds, size_in_bytes, input_height, input_width, ready_to_stream, created_at
`

type UpdateVideoParams struct {
	ThumbnailUrl      sql.NullString
	HlsUrl            sql.NullString
	DashUrl           sql.NullString
	DurationInSeconds sql.NullFloat64
	SizeInBytes       sql.NullInt64
	InputHeight       sql.NullInt64
	InputWidth        sql.NullInt64
	ReadyToStream     bool
	ExternalID        string
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, updateVideo,
		arg.ThumbnailUrl,
		arg.HlsUrl,
		arg.DashUrl,
		arg.DurationInSeconds,
		arg.SizeInBytes,
		arg.InputHeight,
		arg.InputWidth,
		arg.ReadyToStream,
		arg.ExternalID,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CoverUrl,
		&i.PriceInCents,
		&i.TotalViews,
		&i.ThumbnailUrl,
		&i.HlsUrl,
		&i.DashUrl,
		&i.DurationInSeconds,
		&i.SizeInBytes,
		&i.InputHeight,
		&i.InputWidth,
		&i.ReadyToStream,
		&i.CreatedAt,
	)
	return i, err
}
