// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, verified, created_at)
VALUES (?, false, ?)
RETURNING id
`

type CreateUserParams struct {
	Email     string
	CreatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.CreatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, lightning_address, verified, created_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.LightningAddress,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}

const getUserIDByEmail = `-- name: GetUserIDByEmail :one
SELECT id FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserIDByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByEmail, email)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateUserLightningAddress = `-- name: UpdateUserLightningAddress :exec
UPDATE users
SET lightning_address = ?
WHERE id = ?
`

type UpdateUserLightningAddressParams struct {
	LightningAddress sql.NullString
	ID               int64
}

func (q *Queries) UpdateUserLightningAddress(ctx context.Context, arg UpdateUserLightningAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLightningAddress, arg.LightningAddress, arg.ID)
	return err
}

const updateUserVerified = `-- name: UpdateUserVerified :exec
UPDATE users
SET verified = ?
WHERE email = ?
`

type UpdateUserVerifiedParams struct {
	Verified bool
	Email    string
}

func (q *Queries) UpdateUserVerified(ctx context.Context, arg UpdateUserVerifiedParams) error {
	_, err := q.db.ExecContext(ctx, updateUserVerified, arg.Verified, arg.Email)
	return err
}
