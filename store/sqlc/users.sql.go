// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, verified)
VALUES (?, false)
RETURNING id
`

func (q *Queries) CreateUser(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, email)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, verified FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Verified)
	return i, err
}

const updateUserVerified = `-- name: UpdateUserVerified :exec
UPDATE users
SET verified = ?
WHERE email = ?
`

type UpdateUserVerifiedParams struct {
	Verified bool
	Email    string
}

func (q *Queries) UpdateUserVerified(ctx context.Context, arg UpdateUserVerifiedParams) error {
	_, err := q.db.ExecContext(ctx, updateUserVerified, arg.Verified, arg.Email)
	return err
}
