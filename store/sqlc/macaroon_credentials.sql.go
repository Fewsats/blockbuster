// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: macaroon_credentials.sql

package sqlc

import (
	"context"
)

const getRootKeyByIdentifier = `-- name: GetRootKeyByIdentifier :one
SELECT root_key
FROM macaroon_credentials
WHERE identifier = ?
`

func (q *Queries) GetRootKeyByIdentifier(ctx context.Context, identifier string) (string, error) {
	row := q.db.QueryRowContext(ctx, getRootKeyByIdentifier, identifier)
	var root_key string
	err := row.Scan(&root_key)
	return root_key, err
}

const insertMacaroonToken = `-- name: InsertMacaroonToken :one
INSERT INTO macaroon_credentials (
    identifier, root_key, created_at, encoded_base_macaroon, disabled
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING id
`

type InsertMacaroonTokenParams struct {
	Identifier          string
	RootKey             string
	CreatedAt           interface{}
	EncodedBaseMacaroon string
	Disabled            bool
}

func (q *Queries) InsertMacaroonToken(ctx context.Context, arg InsertMacaroonTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertMacaroonToken,
		arg.Identifier,
		arg.RootKey,
		arg.CreatedAt,
		arg.EncodedBaseMacaroon,
		arg.Disabled,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
