// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: macaroon_credentials.sql

package sqlc

import (
	"context"
)

const getRootKeyByTokenID = `-- name: GetRootKeyByTokenID :one
SELECT root_key
FROM macaroon_credentials
WHERE token_id = ?
`

func (q *Queries) GetRootKeyByTokenID(ctx context.Context, tokenID []byte) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getRootKeyByTokenID, tokenID)
	var root_key []byte
	err := row.Scan(&root_key)
	return root_key, err
}

const insertMacaroonToken = `-- name: InsertMacaroonToken :one
INSERT INTO macaroon_credentials (
    token_id, root_key, created_at
) VALUES (
    ?, ?, ?
) RETURNING id
`

type InsertMacaroonTokenParams struct {
	TokenID   []byte
	RootKey   []byte
	CreatedAt interface{}
}

func (q *Queries) InsertMacaroonToken(ctx context.Context, arg InsertMacaroonTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertMacaroonToken, arg.TokenID, arg.RootKey, arg.CreatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}
